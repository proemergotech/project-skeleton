image: docker:latest
services:
- docker:dind

stages:
- build

variables:
  IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH
  IMAGE_NAME_BUILD: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA

.common-scripts:
  - &install-goimports
      go get golang.org/x/tools/cmd/goimports
  - &generate
      cd generate && cp meta.example.yml meta.yml && sed -i 's/false/true/g' meta.yml && go run generate.go && cd ..

lint:
  stage: build
  image: golangci/golangci-lint:v1.32.2-alpine
  script:
    - *install-goimports
    - *generate
    - cd output
    - apk --no-cache add git jq
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - golangci-lint run -v --timeout 2m --out-format code-climate -c .golangci.yml | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

build:
  image: golang:1.15
  stage: build
  script:
    - *install-goimports
    - *generate
    - cd output
    - go mod tidy
    - go build -o /dev/null .

verify:
  stage: build
  script:
    - apk update && apk add git
    - ./verify.sh
  only:
    - branches
  except:
    - master
