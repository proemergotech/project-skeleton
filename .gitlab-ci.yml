image: docker:latest
services:
- docker:dind

stages:
- build
- release
- deploy

variables:
  IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH
  IMAGE_NAME_BUILD: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA

.common-scripts:
- &gitlab-login
    docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

lint:
  stage: build
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  script:
    - cd template
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - golangci-lint run -v --timeout 2m --out-format code-climate -c .golangci.yml | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

build:
  stage: build
  script:
  - *gitlab-login
  - cd template
  - >
    docker build --pull -t $IMAGE_NAME_BUILD
    --build-arg "APP_VERSION=${CI_COMMIT_SHA}"
    --build-arg GOPROXY=${GOPROXY}
    --build-arg GONOPROXY=${GONOPROXY}
    --build-arg GOPRIVATE=${GOPRIVATE}
    .
  - docker push $IMAGE_NAME_BUILD

verify:
  stage: build
  script:
    - apk update && apk add git
    - ./verify.sh
  only:
    - branches
  except:
    - master
